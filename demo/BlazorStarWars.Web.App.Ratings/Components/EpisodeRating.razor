@inject BlazorStarWars.Web.App.Ratings.Client.IRatingClient RatingClient

<div class="row">
    <div class="col-auto">
        <div class="rating">
            <input type="radio" name="rating" value="5" id="5" @onclick="@(() => RateEpisodeAsync(5))"><label for="5">☆</label>
            <input type="radio" name="rating" value="4" id="4" @onclick="@(() => RateEpisodeAsync(4))"><label for="4">☆</label>
            <input type="radio" name="rating" value="3" id="3" @onclick="@(() => RateEpisodeAsync(3))"><label for="3">☆</label>
            <input type="radio" name="rating" value="2" id="2" @onclick="@(() => RateEpisodeAsync(2))"><label for="2">☆</label>
            <input type="radio" name="rating" value="1" id="1" @onclick="@(() => RateEpisodeAsync(1))"><label for="1">☆</label>
        </div>
    </div>
    <div class="col-auto" style="display:flex; align-items:center; font-size:1rem; font-size:20px;">
        <div>(<strong>@averageRate&nbsp;/&nbsp;5</strong>)</div>
        <div>
            <small>
                @totalNumberOfRates votes
            </small>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string EpisodeId { get; set; } = string.Empty;

    private int averageRate = 0;

    private int totalNumberOfRates = 0;

    protected override async Task OnInitializedAsync()
    {
        var ratesQuery = await RatingClient.GetRatingsByEpisode.ExecuteAsync(EpisodeId);
        var rates = ratesQuery.Data?.Ratings ?? [];

        if (rates.Any())
        {
            averageRate = (int)rates.Average(r => r.Rate);
            totalNumberOfRates = rates.Count;
        }

        RatingClient.OnEpisodeRated
            .Watch(EpisodeId)
            .Subscribe(result =>
            {
                averageRate = result.Data?.EpisodeRated.Average ?? 0;
                totalNumberOfRates = result.Data?.EpisodeRated.NumberOfRates ?? 0;

                StateHasChanged();
            });
    }

    private async Task RateEpisodeAsync(int rate)
    {
        var result = await RatingClient.AddRate.ExecuteAsync(EpisodeId, rate);
        averageRate = result.Data?.RateEpisode.Average ?? 0;
        totalNumberOfRates = result.Data?.RateEpisode.NumberOfRates ?? 0;
    }
}
